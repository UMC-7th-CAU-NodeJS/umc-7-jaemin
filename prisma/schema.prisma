// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(20)
  name          String   @map("username") @db.VarChar(10)
  gender        String   @db.VarChar(10)
  birth         DateTime @map("birthdate") @db.Date
  address       String   @db.VarChar(30)
  detailAddress String?  @map("detail_address") @db.VarChar(50)
  phoneNumber   String   @map("phone_num") @db.VarChar(20) 

  reviews       Review[] 
  userFavorCategories UserFood[]

  @@map("user")
}

model Food {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(20)
  genre    String    @db.VarChar(10)
  userFavorCategories UserFood[]
}

model UserFood {
  id             Int    @id @default(autoincrement())
  userId         Int    @map("user_id")
  foodId         Int    @map("food_id")

  user         User         @relation(fields: [userId], references: [id])
  food         Food         @relation(fields: [foodId], references: [id])

  @@index([userId], map: "user_id")
}

model Restaurant {
  id             Int               @id @default(autoincrement())
  name           String            @db.VarChar(20)
  type           String
  address        String
  currentRegionId  Int       // 이 부분이 외래키로 지정되어야 합니다.
  currentRegion    Region?    @relation(fields: [currentRegionId], references: [id]) // 여기에서 수정 필요
  
  reviews        Review[] 
}

model Region {
  id            Int            @id @default(autoincrement())
  regionName    String         @map("region_name")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  restaurants   Restaurant[]   // 이 필드가 Restaurant 모델과의 반대 관계를 정의

  @@map("region")
} 

model Review {
  id            Int        @id @default(autoincrement())
  content       String
  userId        Int        @map("user_id")
  restaurantId  Int        @map("restaurant_id")


  user          User       @relation(fields: [userId], references: [id])
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
}